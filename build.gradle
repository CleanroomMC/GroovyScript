buildscript {
    repositories {
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            url = 'https://maven.cleanroommc.com/'
        }
        maven {
            url = 'https://repo.spongepowered.org/maven/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        if (project.use_mixins.toBoolean()) {
            classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        }
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'

if (project.use_mixins.toBoolean()) {
    apply plugin: 'org.spongepowered.mixin'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

sourceCompatibility = targetCompatibility = '1.8'

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = '1.12.2-14.23.5.2847'
    runDir = 'run'
    mappings = 'stable_39'
    def args = []
    if (project.use_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    clientJvmArgs.addAll(args)
    serverJvmArgs.addAll(args)

    replaceIn("src/main/java/${project.mod_ref_path.replace('.', '/')}.java")
    replace("@VERSION@", project.mod_version)
    replace("@MODID@", project.archivesBaseName)
    replace("@GROOVY_VERSION@", project.groovy_version)
}

repositories {
    maven {
        url = 'https://maven.cleanroommc.com/'
    }
    maven {
        url = 'https://repo.spongepowered.org/maven/'
    }
    maven {
        url = "https://mvnrepository.com/artifact/org.apache.groovy/groovy"
    }
    maven {
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        name = "CurseForge"
        url = 'https://www.cursemaven.com/'
    }
    maven {
        url "http://maven.tterrag.com/"
    }
}

dependencies {
    if (project.use_mixins.toBoolean()) {
        deobfCompile 'zone.rong:mixinbooter:4.2'
    }

    compileOnly 'org.jetbrains:annotations:23.0.0'

    implementation "org.apache.groovy:groovy:${project.groovy_version}"
    shadow "org.apache.groovy:groovy:${project.groovy_version}"

    compile 'mezz.jei:jei_1.12.2:4.16.1.302'

    if (project.debug_mekanism.toBoolean()) {
        deobfCompile 'curse.maven:mekanism-268560:2835175'
    } else {
        deobfProvided 'curse.maven:mekanism-268560:2835175'
    }

    if (project.debug_thermal.toBoolean() || project.debug_de.toBoolean()) {
        deobfCompile 'curse.maven:redstone_flux-270789:2920436'
    } else {
        deobfProvided 'curse.maven:redstone_flux-270789:2920436'
    }

    if (project.debug_blood_magic.toBoolean()) {
        deobfCompile 'curse.maven:guide-api-228832:2645992'
        deobfCompile 'curse.maven:blood-magic-224791:2822288'
    } else {
        deobfProvided 'curse.maven:guide-api-228832:2645992'
        deobfProvided 'curse.maven:blood-magic-224791:2822288'
    }

    if (project.debug_extended_crafting.toBoolean()) {
        deobfCompile 'curse.maven:cucumber-272335:2645867'
        deobfCompile 'curse.maven:extended-crafting-nomifactory-edition-398267:3613140'
    } else {
        deobfProvided 'curse.maven:cucumber-272335:2645867'
        deobfProvided 'curse.maven:extended-crafting-nomifactory-edition-398267:3613140'
    }

    if (project.debug_thermal.toBoolean()) {
        deobfCompile 'curse.maven:cofh_core-69162:2920433'
        deobfCompile 'curse.maven:cofh_world-271384:2920434'
        deobfCompile 'curse.maven:thermal_expansion-69163:2926431'
        deobfCompile 'curse.maven:thermal_foundation-222880:2926428'
    } else {
        deobfProvided 'curse.maven:cofh_core-69162:2920433'
        deobfProvided 'curse.maven:cofh_world-271384:2920434'
        deobfProvided 'curse.maven:thermal_expansion-69163:2926431'
        deobfProvided 'curse.maven:thermal_foundation-222880:2926428'
    }

    if (project.debug_de.toBoolean()) {
        deobfCompile 'curse.maven:codechicken_lib_1_8-242818:2779848'
        deobfCompile 'curse.maven:draconic_evolution-223565:3431261'
        deobfCompile 'curse.maven:brandons_core-231382:3408276'
    } else {
        deobfProvided 'curse.maven:codechicken_lib_1_8-242818:2779848'
        deobfProvided 'curse.maven:draconic_evolution-223565:3431261'
        deobfProvided 'curse.maven:brandons_core-231382:3408276'
    }

    if (project.debug_enderio.toBoolean()) {
        deobfProvided "com.enderio.core:EnderCore:1.12.2-+"
        deobfCompile("com.enderio:EnderIO:1.12.2-+") {
            transitive = false
        }
    } else {
        deobfProvided "com.enderio.core:EnderCore:1.12.2-+"
        deobfProvided("com.enderio:EnderIO:1.12.2-+") {
            transitive = false
        }
    }

    if (project.debug_ic2.toBoolean()) {
        deobfCompile 'curse.maven:industrialcraft_experimental-242638:3838713'
        deobfProvided 'curse.maven:industrialcraft_classic-242942:3093607'
    } else {
        deobfProvided 'curse.maven:industrialcraft_experimental-242638:3838713'
        deobfProvided 'curse.maven:industrialcraft_classic-242942:3093607'
    }

    if (project.debug_astral.toBoolean() || project.debug_thaum.toBoolean()) {
        runtime 'curse.maven:baubles-227083:2518667'
    }

    if (project.debug_astral.toBoolean()) {
        deobfCompile 'curse.maven:astralsorcery-sorcery-241721:3044416'
    } else {
        deobfProvided 'curse.maven:astralsorcery-sorcery-241721:3044416'
    }

    if (project.debug_thaum.toBoolean()) {
        deobfCompile 'curse.maven:thaumcraft-223628:2629023'
        runtime 'curse.maven:thaumic_jei-285492:2705304'
    } else {
        deobfProvided 'curse.maven:thaumcraft-223628:2629023'
    }

    if (project.debug_ie.toBoolean()) {
        deobfCompile 'curse.maven:immersive_engineering-231951:2974106'
    } else {
        deobfProvided 'curse.maven:immersive_engineering-231951:2974106'
    }

    if (project.debug_tinkers.toBoolean()) {
        deobfCompile 'slimeknights.mantle:Mantle:1.12-1.3.3.55'
        deobfCompile 'slimeknights:TConstruct:1.12.2-2.13.0.190'
        deobfCompile 'curse.maven:constructs-armory-287683:3174535'
        deobfCompile 'curse.maven:tinkers-complement-272671:2843439'
    } else {
        deobfProvided 'slimeknights.mantle:Mantle:1.12-1.3.3.55'
        deobfProvided 'slimeknights:TConstruct:1.12.2-2.13.0.190'
        deobfProvided 'curse.maven:constructs-armory-287683:3174535'
        deobfProvided 'curse.maven:tinkers-complement-272671:2843439'
    }
}

sourceSets {
    main {
        ext.refMap = 'mixins.' + archives_base_name + '.refmap.json'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    rename '(.+_at.cfg)', 'META-INF/$1' // Access Transformers
}

jar {
    manifest {
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
            }
        }
        if (project.use_mixins.toBoolean()) {
            attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
            // false for dev and true for non dev
            attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
        }
        attributes(attribute_map)
    }
}

shadowJar {
    classifier = ''
    baseName = archivesBaseName
    version = version
    configurations = [project.configurations.shadow]
    relocate 'lib.group', "${project.group}.shadow.lib.group" // ensure repackaged packages have unique names
}

reobf {
    shadowJar {}
}

// this replaces jar.finalizedBy('reobfJar') in the standard forge mod buildscript
tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')

artifacts {
    archives shadowJar
}
