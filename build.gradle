import com.gtnewhorizons.retrofuturagradle.mcp.ReobfuscatedJar
import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.16'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'
    def args = ["-ea:${project.group}"]
    args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    args << '-Dmixin.hotSwap=true'
    args << '-Dmixin.checks.interfaces=true'
    args << '-Dmixin.debug.export=true'
    if (project.debug_use_examples_folder.toBoolean()) args << '-Dgroovyscript.use_examples_folder=true'
    extraRunJvmArguments.addAll(args)

    useDependencyAccessTransformers = true

    injectedTags.put("ID", project.archives_base_name)
    injectedTags.put("VERSION", project.version)
    injectedTags.put("GROOVY_VERSION", project.groovy_version)
}

// Generate a my.project.Tags class with the version number as a field
tasks.injectTags.configure {
    outputClassName.set("${project.group}.${project.archives_base_name}.Tags")
}

repositories {
    maven {
        url = 'https://maven.cleanroommc.com'
    }
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        url 'https://cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = 'https://mvnrepository.com/artifact/org.apache.groovy/groovy'
    }
    maven {
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        url 'http://maven.tterrag.com/'
        allowInsecureProtocol = true
    }
    maven {
        url = 'http://maven.ic2.player.to/'
        allowInsecureProtocol = true
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.0.1'
    implementation 'zone.rong:mixinbooter:8.3'

    String mixin = modUtils.enableMixins('org.spongepowered:mixin:0.8.3')
    api (mixin) {
        transitive = false
    }
    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:24.1.1-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.6'
    annotationProcessor (mixin) {
        transitive = false
    }

    embed "org.apache.groovy:groovy:${project.groovy_version}"

    implementation 'mezz.jei:jei_1.12.2:4.16.1.302'

    compileOnly rfg.deobf('curse.maven:codechicken_lib_1_8-242818:2779848')
    if (project.debug_avaritia.toBoolean() || project.debug_draconic_evolution.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:codechicken_lib_1_8-242818:2779848')
    }

    compileOnly rfg.deobf('curse.maven:avaritia_1_10-261348:3143349')
    if (project.debug_avaritia.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:avaritia_1_10-261348:3143349')
    }

    compileOnly rfg.deobf("curse.maven:ctm-267602:2915363")
    compileOnly rfg.deobf("curse.maven:chisel-235279:2915375")
    if (project.debug_chisel.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:ctm-267602:2915363')
        runtimeOnly rfg.deobf('curse.maven:chisel-235279:2915375')
    }

    compileOnly 'slimeknights.mantle:Mantle:1.12-1.3.3.55'
    if (project.debug_inspirations.toBoolean() || project.debug_tinkers.toBoolean()) {
        runtimeOnly 'slimeknights.mantle:Mantle:1.12-1.3.3.55'
    }

    compileOnly rfg.deobf('curse.maven:mekanism-268560:2835175')
    if (project.debug_mekanism.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:mekanism-268560:2835175')
    }

    compileOnly rfg.deobf('curse.maven:ae2-extended-life-570458:4553942')
    if (project.debug_applied_energistics_2.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:ae2-extended-life-570458:4553942')
    }

    compileOnly rfg.deobf('curse.maven:ae2-extended-life-570458:4553942')
    if (project.debug_applied_energistics_2.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:ae2-extended-life-570458:4553942')
    }

    compileOnly rfg.deobf('curse.maven:codechicken_lib_1_8-242818:2779848')
    compileOnly rfg.deobf('curse.maven:redstone_flux-270789:2920436')
    if (project.debug_thermal.toBoolean() || project.debug_draconic_evolution.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:codechicken_lib_1_8-242818:2779848')
        runtimeOnly rfg.deobf('curse.maven:redstone_flux-270789:2920436')
    }

    compileOnly rfg.deobf('curse.maven:guide-api-228832:2645992')
    if (project.debug_blood_magic.toBoolean() || project.debug_woot.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:guide-api-228832:2645992')
    }

    compileOnly rfg.deobf('curse.maven:blood-magic-224791:2822288')
    if (project.debug_blood_magic.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:blood-magic-224791:2822288')
    }

    compileOnly rfg.deobf('curse.maven:cyclops-core-232758:3159497')
    if (project.debug_evilcraft.toBoolean() || project.debug_integrated_dynamics.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:cyclops-core-232758:3159497')
    }

    compileOnly rfg.deobf('curse.maven:evilcraft-74610:2811267')
    if (project.debug_evilcraft.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:evilcraft-74610:2811267')
    }

    compileOnly rfg.deobf('curse.maven:common-capabilities-247007:3053017')
    compileOnly rfg.deobf('curse.maven:integrated-dynamics-236307:3159505')
    if (project.debug_integrated_dynamics.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:common-capabilities-247007:3053017')
        runtimeOnly rfg.deobf('curse.maven:integrated-dynamics-236307:3159505')
    }
    
    compileOnly rfg.deobf('curse.maven:compact-machines-224218:2707509')
    if (project.debug_compact_machines.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:compact-machines-224218:2707509')
    }
    
    compileOnly rfg.deobf('curse.maven:actually-additions-228404:3117927')
    if (project.debug_actually_additions.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:actually-additions-228404:3117927')
    }

    compileOnly rfg.deobf('curse.maven:inspirations-284007:2843007')
    if (project.debug_inspirations.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:inspirations-284007:2843007')
    }

    compileOnly rfg.deobf('curse.maven:cucumber-272335:2645867')
    compileOnly rfg.deobf('curse.maven:extended-crafting-nomifactory-edition-398267:3613140')
    if (project.debug_extended_crafting.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:cucumber-272335:2645867')
        runtimeOnly rfg.deobf('curse.maven:extended-crafting-nomifactory-edition-398267:3613140')
    }

    compileOnly rfg.deobf('curse.maven:cofh_core-69162:2920433')
    compileOnly rfg.deobf('curse.maven:cofh_world-271384:2920434')
    compileOnly rfg.deobf('curse.maven:thermal_expansion-69163:2926431')
    compileOnly rfg.deobf('curse.maven:thermal_foundation-222880:2926428')
    if (project.debug_thermal.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:cofh_core-69162:2920433')
        runtimeOnly rfg.deobf('curse.maven:cofh_world-271384:2920434')
        runtimeOnly rfg.deobf('curse.maven:thermal_expansion-69163:2926431')
        runtimeOnly rfg.deobf('curse.maven:thermal_foundation-222880:2926428')
    }

    compileOnly rfg.deobf('curse.maven:draconic_evolution-223565:3431261')
    compileOnly rfg.deobf('curse.maven:brandons_core-231382:3408276')

    if (project.debug_draconic_evolution.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:draconic_evolution-223565:3431261')
        runtimeOnly rfg.deobf('curse.maven:brandons_core-231382:3408276')
    }

    // WARNING: experimental must be placed before classic, otherwise you will crash when debugging either.
    compileOnly rfg.deobf('curse.maven:industrialcraft_experimental-242638:3838713')
    compileOnly rfg.deobf('curse.maven:industrialcraft_classic-242942:3093607')
    if (project.debug_industrial_craft_2_experimental.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:industrialcraft_experimental-242638:3838713')
    } else if (project.debug_industrial_craft_2_classic.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:industrialcraft_classic-242942:3093607')
    }

    compileOnly rfg.deobf('curse.maven:baubles-227083:2518667')
    if (project.debug_astral.toBoolean() || project.debug_thaum.toBoolean() || project.debug_botania.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:baubles-227083:2518667')
    }

    compileOnly rfg.deobf('curse.maven:botania-225643:3330934')
    if (project.debug_botania.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:botania-225643:3330934')
    }

    compileOnly rfg.deobf('curse.maven:thaumcraft-223628:2629023')
    if (project.debug_thaum.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:thaumcraft-223628:2629023')
        runtimeOnly 'curse.maven:thaumic_jei-285492:2705304'
    }

    compileOnly rfg.deobf('curse.maven:astralsorcery-sorcery-241721:3044416')
    if (project.debug_astral.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:astralsorcery-sorcery-241721:3044416')
    }

    compileOnly rfg.deobf('curse.maven:immersive_engineering-231951:2974106')
    if (project.debug_immersive_engineering.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:immersive_engineering-231951:2974106')
    }

    compileOnly rfg.deobf('curse.maven:patchouli-306770:3162874')
    compileOnly rfg.deobf('curse.maven:mystical_lib-277064:3483816')
    compileOnly rfg.deobf('curse.maven:mystical_world-282940:3460961')
    compileOnly rfg.deobf('curse.maven:roots-246183:3905074')
    if (project.debug_roots.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:patchouli-306770:3162874')
        runtimeOnly rfg.deobf('curse.maven:mystical_lib-277064:3483816')
        runtimeOnly rfg.deobf('curse.maven:mystical_world-282940:3460961')
        runtimeOnly rfg.deobf('curse.maven:roots-246183:3905074')
    }

    compileOnly rfg.deobf('curse.maven:thaumcraft-223628:2629023')
    if (project.debug_thaum.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:baubles-227083:2518667')
        runtimeOnly rfg.deobf('curse.maven:thaumcraft-223628:2629023')
        runtimeOnly 'curse.maven:thaumic_jei-285492:2705304'
    }

    compileOnly rfg.deobf('curse.maven:astralsorcery-sorcery-241721:3044416')
    if (project.debug_astral.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:astralsorcery-sorcery-241721:3044416')
    }

    compileOnly rfg.deobf('curse.maven:immersive_engineering-231951:2974106')
    if (project.debug_immersive_engineering.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:immersive_engineering-231951:2974106')
    }

    compileOnly rfg.deobf("curse.maven:woot-244049:2712670")
    if (project.debug_woot.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:woot-244049:2712670')
    }

    compileOnly 'slimeknights.mantle:Mantle:1.12-1.3.3.55'
    compileOnly 'slimeknights:TConstruct:1.12.2-2.13.0.190'
    compileOnly rfg.deobf('curse.maven:constructs-armory-287683:3174535')
    compileOnly rfg.deobf('curse.maven:tinkers-complement-272671:2843439')
    if (project.debug_tinkers.toBoolean()) {
        runtimeOnly 'slimeknights:TConstruct:1.12.2-2.13.0.190'
        runtimeOnly rfg.deobf('curse.maven:constructs-armory-287683:3174535')
        runtimeOnly rfg.deobf('curse.maven:tinkers-complement-272671:2843439')
    }

    compileOnly 'com.enderio.core:EnderCore:1.12.2-+'
    compileOnly ('com.enderio:EnderIO:1.12.2-+') {
        transitive = false
    }
    if (project.debug_enderio.toBoolean()) {
        runtimeOnly 'com.enderio.core:EnderCore:1.12.2-+'
        runtimeOnly ('com.enderio:EnderIO:1.12.2-+') {
            transitive = false
        }
    }

    compileOnly rfg.deobf('net.sengir.forestry:forestry_1.12.2:5.8.2.422')
    if (project.debug_forestry.toBoolean()) {
        runtimeOnly rfg.deobf('net.sengir.forestry:forestry_1.12.2:5.8.2.422')
        runtimeOnly rfg.deobf('curse.maven:jei-bees-248370:2490058')
    }

    compileOnly rfg.deobf('curse.maven:advancedmortars-283777:2780626')
    if (project.debug_adv_mortars.toBoolean()) {
        runtimeOnly rfg.deobf('curse.maven:advancedmortars-283777:2780626')
    }

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    // replace stuff in mcmod.info, nothing else
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // replace version and mcversion
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }
}

jar {
    manifest {
        def attribute_map = [:]
        attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
        attribute_map['FMLCorePluginContainsFMLMod'] = true
        attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}

idea {
    module { inheritOutputDirs = true }
    project { settings {
        runConfigurations {
            "1. Run Client"(Gradle) {
                taskNames = ['runClient']
            }
            "2. Run Server"(Gradle) {
                taskNames = ['runServer']
            }
            "3. Run Obfuscated Client"(Gradle) {
                taskNames = ['runObfClient']
            }
            "4. Run Obfuscated Server"(Gradle) {
                taskNames = ['runObfServer']
            }
        }
        compiler.javac {
            afterEvaluate {
                javacAdditionalOptions = '-encoding utf8'
                moduleJavacAdditionalOptions = [
                        (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                ]
            }
        }
    }}
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
