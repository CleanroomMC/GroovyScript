package com.cleanroommc.groovyscript.documentation.annotations;

import com.cleanroommc.groovyscript.documentation.Exporter;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Method;

/**
 * Marks the given Method as a Recipe Builder method, indicating it returns a Recipe Builder class and is used inside a Recipe Builder.<br>
 * A Recipe Builder is a class which follows the Builder design pattern, where each step of the builder returns the builder class,
 * allowing chaining of methods to quickly and cleanly create complicated objects which may or may not require some values.<br>
 * Many elements are autogenerated by default.
 * <ul>
 *     <li>{@link #signature()} is a string that by default parses {@link Method#getParameterTypes()} and reduces each parameter to just the class name of the package.
 *     In some cases, this will generate an inaccurate or less readable example,
 *     e.g. generating {@code Collection<ItemStack>} as {@code Collection} or {@code ItemStack...} as {@code ItemStack[]}.
 *     In such cases, passing a specific string into {@link #signature()} to improve accuracy and readability is the provided solution.</li>
 *     <li>{@link #field()} is an array that defaults to {@link Method#getName()} if not overridden, and indicates the target field(s) that the method modifies.</li>
 *     <li>{@link #priority()} is an integer that influences the sorting of the {@link RecipeBuilderMethodDescription} relative to other {@link RecipeBuilderMethodDescription}s.</li>
 * </ul>
 */
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface RecipeBuilderMethodDescription {

    /**
     * In some situations, the method signature is reduced, from e.g. {@code Collection<ItemStack>} to {@code Collection<>} or {@code ItemStack...} to {@code ItemStack[]}.<br>
     * If this is not defined, a method signature will be generated via a combination of
     * {@link Exporter#simpleName(Method)}, {@link Exporter#simpleName(Class...)}, {@link Exporter#simpleName(Class)}, and {@link Exporter#simpleName(String)}
     * instead.
     *
     * @return a human-readable method signature
     */
    String signature() default "";

    /**
     * An array of all fields this method modifies. By default, it checks for a field with the same name as the method.
     *
     * @return an array of the names of the field calling the method modifies. Defaults to the method name
     */
    String[] field() default {};

    /**
     * Priority of the method, relative to other {@link RecipeBuilderMethodDescription}s modifying the shared {@link Property}.
     * Priorities sort entries such that lowest is first, then by the length of {@link Method#getName()}, then by {@link String#compareToIgnoreCase} of {@link Method#getName()}.
     *
     * @return the method priority
     */
    int priority() default 1000;

}
