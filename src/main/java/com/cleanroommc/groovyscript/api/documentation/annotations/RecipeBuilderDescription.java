package com.cleanroommc.groovyscript.api.documentation.annotations;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Field;

/**
 * Marks the given Method as the initializing method for a Recipe Builder, indicating it returns a Recipe Builder class.<br>
 * A Recipe Builder is a class which follows the Builder design pattern, where each step of the builder returns the builder class,
 * allowing chaining of methods to quickly and cleanly create complicated objects which may or may not require some values.
 *
 * <ul>
 *     <li>{@link #example()} is an array of {@link Example}s In situations where either a single {@link Example} with multiple lines or
 *     multiple {@link Example}s could be used, using multiple {@link Example}s is preferable.</li>
 *     <li>{@link #requirement()} is a localization key that is autogenerated to be
 *     <code>
 *         groovyscript.wiki.{@link com.cleanroommc.groovyscript.compat.mods.GroovyContainer#getModId() GroovyContainer#getModId()}.{@link com.cleanroommc.groovyscript.registry.VirtualizedRegistry#getName() VirtualizedRegistry#getName()}.{@link Field#getName()}
 *     </code>
 *     </li>
 *     <li>{@link #priority()} is an integer that influences the sorting of the {@link RecipeBuilderDescription} relative to other {@link RecipeBuilderDescription}s.</li>
 * </ul>
 */
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface RecipeBuilderDescription {

    /**
     * An array of examples, which will then be formatted and generated for both the wiki and the text script files.
     *
     * @return array of examples
     * @see Example
     */
    Example[] example() default {};

    /**
     * An override to other {@link Property} declarations, and only used for {@link Property} instances which are unique to the Recipe Builder
     * obtained via the given method.
     *
     * @return array of requirements unique to the recipe builder being accessed via this method
     * @see Property
     */
    Property[] requirement() default {};

    /**
     * Priority of the method, relative to other Recipe Builder methods in the same class.
     * Priorities sort entries such that lowest is first, with ties being broken via alphabetical sorting of the method name.
     *
     * @return the method priority (relative to other recipe builder priorities in the same class)
     */
    int priority() default 1000;

}
